@page "/Login"
@rendermode RenderMode.InteractiveWebAssembly
@using Application.Interface
@using Domain.Models.DTO
@using WebApp.FrontEndEncryption
@inject IUserService UserService
@inject IDiffieHellmanUtil DiffieHellmanUtil
@inject NavigationManager NavigationManager
@inject IEncryptionUtil EncryptionUtil


<div class="container mt-4">
    <div class="text-center mb-3">
        <button class="btn btn-primary me-2" @onclick="ShowLogin" disabled="@IsLoginVisible">Login</button>
        <button class="btn btn-secondary" @onclick="ShowRegister" disabled="@(!IsLoginVisible)">Register</button>
    </div>

    @if (IsLoginVisible)
    {
        <div class="card shadow p-4">
            <h4 class="card-title text-center mb-4">Login</h4>
            <div class="mb-3">
                <label for="loginUsername" class="form-label">Username</label>
                <input id="loginUsername" class="form-control" @bind="_loginModel.Username" />
            </div>
            <div class="mb-3">
                <label for="loginPassword" class="form-label">Password</label>
                <input id="loginPassword" type="password" class="form-control" @bind="_loginModel.Password" />
            </div>
            <div class="d-grid">
                <button class="btn btn-primary" @onclick="Login">Login</button>
            </div>

            @if (LoginErrorMessage != null)
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @LoginErrorMessage
                </div>
            }
        </div>
    }
    else
    {
        <div class="card shadow p-4">
            <h4 class="card-title text-center mb-4">Register</h4>
            <div class="mb-3">
                <label for="registerUsername" class="form-label">Username</label>
                <input id="registerUsername" class="form-control" @bind="_registerModel.Username" />
            </div>
            <div>
                <label for="registerFirstName" class="form-label">First Name</label>
                <input id="registerFirstName" class="form-control" @bind="_registerModel.FirstName"/>
            </div>
            <div>
                <label for="registerLastName" class="form-label">Last Name</label>
                <input id="registerLastName" class="form-control" @bind="_registerModel.LastName" />
            </div>
            <div class="mb-3">
                <label for="registerPassword" class="form-label">Password</label>
                <input id="registerPassword" type="password" class="form-control" @bind="Password" />
            </div>
            <div class="mb-3">
                <label for="confirmPassword" class="form-label">Confirm Password</label>
                <input id="confirmPassword" type="password" class="form-control" @bind="ConfirmPassword" />
            </div>
            <div class="d-grid">
                <button class="btn btn-success" @onclick="Register">Register</button>
            </div>

            @if (RegisterErrorMessage != null)
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @RegisterErrorMessage
                </div>
            }
        </div>
    }
</div>

@code {
    private bool IsLoginVisible = true;

    private LoginModel _loginModel = new();

    private string? LoginErrorMessage;

    private RegisterUserDTO _registerModel = new();

    private string? RegisterErrorMessage;

    private string Password;
    private string ConfirmPassword;

    protected override async Task OnInitializedAsync()
    {

    }

    private void ShowLogin()
    {
        IsLoginVisible = true;
        ClearMessages();
    }

    private void ShowRegister()
    {
        IsLoginVisible = false;
        ClearMessages();
    }

    private void ClearMessages()
    {
        LoginErrorMessage = null;
        RegisterErrorMessage = null;
    }

    private void Login()
    {
        if (false)
        {
            LoginErrorMessage = "Invalid username or password.";
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task Register()
    {
        if (Password != ConfirmPassword)
        {
            RegisterErrorMessage = "Passwords do not match.";
            return;
        }

        _registerModel.Salt = EncryptionUtil.GetSalt();
        var encryptedPass = EncryptionUtil.HashPassword(Password, _registerModel.Salt);
        var keyDictionary = DiffieHellmanUtil.GetKeys();
        var publickey = keyDictionary[ECDHKey.Public];
        await UserService.Register(_registerModel);

        RegisterErrorMessage = "Registration successful! Please log in.";
        IsLoginVisible = true;

    }

    private class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

}